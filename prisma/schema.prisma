// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id         Int     @id @default(autoincrement())
  email      String  @unique
  password   String
  role       Role    @default(USER)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  posts      Post[]
  profile    Profile?
}

model Profile {
  id           Int    @id @default(autoincrement())
  firstname    String
  lastname     String
  metalink      String?
  instalink    String?
  tweetlink    String?
  linkedin     String?
  titleprofile String
  description  String
  profilepath  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User   @relation(fields: [userId], references: [id])
  userId       Int    @unique
}

model Icon {
  id        Int    @id @default(autoincrement())
  name      String @unique
  path      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  categories Categorie[]
}

model Categorie {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String
  principal   Boolean
  iconId      Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  icon        Icon?   @relation(fields: [iconId], references: [id], onDelete: SetNull)
  posts       Post[]
}

model Post {
  id           Int     @id @default(autoincrement())
  title        String
  description  String
  categoryId   Int
  authorId     Int
  markdownpath String
  imagepath    String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  author       User    @relation(fields: [authorId], references: [id])
  category     Categorie @relation(fields: [categoryId], references: [id])
}
model Messages{
    id           Int     @id @default(autoincrement())
    name String
    email String

}
model Message {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String
  queryType QueryType
  content   String
  status    MessageStatus @default(PENDING)
  createdAt DateTime @default(now())
}


enum Role {
  USER
  ADMIN
}
enum QueryType {
  GENERAL
  SUPPORT
  FEEDBACK
  BUSINESS
}
enum MessageStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}
